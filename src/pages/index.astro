---
import Layout from '../layouts/Layout.astro';
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<style>
  #cesiumContainer {
    height: 100dvh;
    max-height: 100%;
  }
</style>

<script>
  window.CESIUM_BASE_URL = '/cesium';

  import {
    Cartesian3,
    createOsmBuildingsAsync,
    Ion,
    Math as CesiumMath,
    GeoJsonDataSource,
    IonResource,
    Terrain,
    Viewer,
    ConstantProperty,
    ClassificationType,
  } from 'cesium';

  Ion.defaultAccessToken = import.meta.env.PUBLIC_CESIUM_TOKEN;

  // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
  const viewer = new Viewer('cesiumContainer', {
    terrain: Terrain.fromWorldTerrain(),
  });

  viewer.camera.flyTo({
    destination: Cartesian3.fromDegrees(-104.9965, 39.74248, 4000),
  });

  // Add Cesium OSM Buildings.
  const buildingsTileset = await createOsmBuildingsAsync();
  viewer.scene.primitives.add(buildingsTileset);

  // STEP 3 CODE
  async function addBuildingGeoJSON() {
    // Load the GeoJSON file from Cesium ion.
    const geoJSONURL = await IonResource.fromAssetId(2410572);
    // Create the geometry from the GeoJSON, and clamp it to the ground.
    const geoJSON = await GeoJsonDataSource.load(geoJSONURL, { clampToGround: true });
    // Add it to the scene.
    const dataSource = await viewer.dataSources.add(geoJSON);
    // By default, polygons in CesiumJS will be draped over all 3D content in the scene.
    // Modify the polygons so that this draping only applies to the terrain, not 3D buildings.
    for (const entity of dataSource.entities.values) {
      entity.polygon!.classificationType = new ConstantProperty(ClassificationType.TERRAIN);
    }
    // Move the camera so that the polygon is in view.
    viewer.flyTo(dataSource);
  }
  addBuildingGeoJSON();
</script>

<Layout title="This is a Cesium Demo.">
  <div id="cesiumContainer"></div>
</Layout>
