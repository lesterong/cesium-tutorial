---
import Layout from '../layouts/Layout.astro';
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<style>
  #cesiumContainer {
    height: 100dvh;
    max-height: 100%;
  }
</style>

<script>
  window.CESIUM_BASE_URL = '/cesium';

  import {
    Cartesian3,
    createOsmBuildingsAsync,
    Ion,
    Math as CesiumMath,
    GeoJsonDataSource,
    IonResource,
    Terrain,
    Viewer,
    ConstantProperty,
    ClassificationType,
    Cesium3DTileStyle,
    Cesium3DTileset,
    defined,
    ScreenSpaceEventType,
    InfoBox,
  } from 'cesium';

  Ion.defaultAccessToken = import.meta.env.PUBLIC_CESIUM_TOKEN;

  // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.
  const viewer = new Viewer('cesiumContainer', {
    terrain: Terrain.fromWorldTerrain(),
    infoBox: true,
  });

  viewer.camera.flyTo({
    destination: Cartesian3.fromDegrees(-104.9965, 39.74248, 4000),
  });

  // Add Cesium OSM Buildings.
  const buildingsTileset = await createOsmBuildingsAsync();
  viewer.scene.primitives.add(buildingsTileset);

  // STEP 3 CODE
  async function addBuildingGeoJSON() {
    // Load the GeoJSON file from Cesium ion.
    const geoJSONURL = await IonResource.fromAssetId(2410572);
    // Create the geometry from the GeoJSON, and clamp it to the ground.
    const geoJSON = await GeoJsonDataSource.load(geoJSONURL, { clampToGround: true });
    // Add it to the scene.
    const dataSource = await viewer.dataSources.add(geoJSON);
    // By default, polygons in CesiumJS will be draped over all 3D content in the scene.
    // Modify the polygons so that this draping only applies to the terrain, not 3D buildings.
    for (const entity of dataSource.entities.values) {
      entity.polygon!.classificationType = new ConstantProperty(ClassificationType.TERRAIN);
    }
    // Move the camera so that the polygon is in view.
    viewer.flyTo(dataSource);
  }
  addBuildingGeoJSON();

  // STEP 4 CODE
  // Hide individual buildings in this area using 3D Tiles Styling language.
  buildingsTileset.style = new Cesium3DTileStyle({
    // Create a style rule to control each building's "show" property.
    show: {
      conditions: [
        // Any building that has this elementId will have `show = false`.
        ['${elementId} === 332469316', false],
        ['${elementId} === 332469317', false],
        ['${elementId} === 235368665', false],
        ['${elementId} === 530288180', false],
        ['${elementId} === 530288179', false],
        ['${elementId} === 532245203', false],
        // If a building does not have one of these elementIds, set `show = true`.
        [true, true],
      ],
    },
    // Set the default color style for this particular 3D Tileset.
    // For any building that has a `cesium#color` property, use that color, otherwise make it white.
    color: "Boolean(${feature['cesium#color']}) ? color(${feature['cesium#color']}) : color('#ffffff')",
  });

  // STEP 6 CODE
  // Add the 3D Tileset you created from your Cesium ion account.
  const newBuildingTileset = await Cesium3DTileset.fromIonAssetId(2410598);
  viewer.scene.primitives.add(newBuildingTileset);

  // Move the camera to the new building.
  viewer.flyTo(newBuildingTileset);

  // STEP 7 CODE
  // Toggle the tileset's show property when the button is clicked.
  document.getElementById('toggle-building')!.onclick = function () {
    newBuildingTileset.show = !newBuildingTileset.show;
  };

  const infoBox = new InfoBox(document.body);

  // screenSpaceEventHandler
  const handler = viewer.screenSpaceEventHandler;
  handler.setInputAction(function (movement: any) {
    const pickedFeature = viewer.scene.pick(movement.position);
    infoBox.viewModel.showInfo = false;
    if (!defined(pickedFeature)) {
      console.log('No picked feature');
      return;
    }
    console.log(pickedFeature.primitive);
    if (defined(pickedFeature) && pickedFeature.primitive === newBuildingTileset) {
      infoBox.viewModel.description = 'This is the description of the tileset.';
      infoBox.viewModel.showInfo = true;
    }
  }, ScreenSpaceEventType.LEFT_CLICK);
</script>

<style type="text/css">
  #toggle-building {
    z-index: 1;
    position: fixed;
    top: 5px;
    left: 5px;
  }
</style>
<script></script>

<Layout title="This is a Cesium Demo.">
  <button id="toggle-building">Toggle new building</button>
  <div id="cesiumContainer"></div>
</Layout>
